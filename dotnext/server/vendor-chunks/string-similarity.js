"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/string-similarity";
exports.ids = ["vendor-chunks/string-similarity"];
exports.modules = {

/***/ "(rsc)/./node_modules/string-similarity/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/string-similarity/src/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    compareTwoStrings: compareTwoStrings,\n    findBestMatch: findBestMatch\n};\nfunction compareTwoStrings(first, second) {\n    first = first.replace(/\\s+/g, \"\");\n    second = second.replace(/\\s+/g, \"\");\n    if (first === second) return 1; // identical or empty\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 0-letter or 1-letter string\n    let firstBigrams = new Map();\n    for(let i = 0; i < first.length - 1; i++){\n        const bigram = first.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    ;\n    let intersectionSize = 0;\n    for(let i = 0; i < second.length - 1; i++){\n        const bigram = second.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n        if (count > 0) {\n            firstBigrams.set(bigram, count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n}\nfunction findBestMatch(mainString, targetStrings) {\n    if (!areArgsValid(mainString, targetStrings)) throw new Error(\"Bad arguments: First argument should be a string, second should be an array of strings\");\n    const ratings = [];\n    let bestMatchIndex = 0;\n    for(let i = 0; i < targetStrings.length; i++){\n        const currentTargetString = targetStrings[i];\n        const currentRating = compareTwoStrings(mainString, currentTargetString);\n        ratings.push({\n            target: currentTargetString,\n            rating: currentRating\n        });\n        if (currentRating > ratings[bestMatchIndex].rating) {\n            bestMatchIndex = i;\n        }\n    }\n    const bestMatch = ratings[bestMatchIndex];\n    return {\n        ratings: ratings,\n        bestMatch: bestMatch,\n        bestMatchIndex: bestMatchIndex\n    };\n}\nfunction areArgsValid(mainString, targetStrings) {\n    if (typeof mainString !== \"string\") return false;\n    if (!Array.isArray(targetStrings)) return false;\n    if (!targetStrings.length) return false;\n    if (targetStrings.find(function(s) {\n        return typeof s !== \"string\";\n    })) return false;\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RyaW5nLXNpbWlsYXJpdHkvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxtQkFBa0JBO0lBQ2xCQyxlQUFjQTtBQUNmO0FBRUEsU0FBU0Qsa0JBQWtCRSxLQUFLLEVBQUVDLE1BQU07SUFDdkNELFFBQVFBLE1BQU1FLE9BQU8sQ0FBQyxRQUFRO0lBQzlCRCxTQUFTQSxPQUFPQyxPQUFPLENBQUMsUUFBUTtJQUVoQyxJQUFJRixVQUFVQyxRQUFRLE9BQU8sR0FBRyxxQkFBcUI7SUFDckQsSUFBSUQsTUFBTUcsTUFBTSxHQUFHLEtBQUtGLE9BQU9FLE1BQU0sR0FBRyxHQUFHLE9BQU8sR0FBRyw2Q0FBNkM7SUFFbEcsSUFBSUMsZUFBZSxJQUFJQztJQUN2QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sTUFBTUcsTUFBTSxHQUFHLEdBQUdHLElBQUs7UUFDMUMsTUFBTUMsU0FBU1AsTUFBTVEsU0FBUyxDQUFDRixHQUFHQSxJQUFJO1FBQ3RDLE1BQU1HLFFBQVFMLGFBQWFNLEdBQUcsQ0FBQ0gsVUFDNUJILGFBQWFPLEdBQUcsQ0FBQ0osVUFBVSxJQUMzQjtRQUVISCxhQUFhUSxHQUFHLENBQUNMLFFBQVFFO0lBQzFCOztJQUVBLElBQUlJLG1CQUFtQjtJQUN2QixJQUFLLElBQUlQLElBQUksR0FBR0EsSUFBSUwsT0FBT0UsTUFBTSxHQUFHLEdBQUdHLElBQUs7UUFDM0MsTUFBTUMsU0FBU04sT0FBT08sU0FBUyxDQUFDRixHQUFHQSxJQUFJO1FBQ3ZDLE1BQU1HLFFBQVFMLGFBQWFNLEdBQUcsQ0FBQ0gsVUFDNUJILGFBQWFPLEdBQUcsQ0FBQ0osVUFDakI7UUFFSCxJQUFJRSxRQUFRLEdBQUc7WUFDZEwsYUFBYVEsR0FBRyxDQUFDTCxRQUFRRSxRQUFRO1lBQ2pDSTtRQUNEO0lBQ0Q7SUFFQSxPQUFPLE1BQU9BLG1CQUFxQmIsQ0FBQUEsTUFBTUcsTUFBTSxHQUFHRixPQUFPRSxNQUFNLEdBQUc7QUFDbkU7QUFFQSxTQUFTSixjQUFjZSxVQUFVLEVBQUVDLGFBQWE7SUFDL0MsSUFBSSxDQUFDQyxhQUFhRixZQUFZQyxnQkFBZ0IsTUFBTSxJQUFJRSxNQUFNO0lBRTlELE1BQU1DLFVBQVUsRUFBRTtJQUNsQixJQUFJQyxpQkFBaUI7SUFFckIsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlTLGNBQWNaLE1BQU0sRUFBRUcsSUFBSztRQUM5QyxNQUFNYyxzQkFBc0JMLGFBQWEsQ0FBQ1QsRUFBRTtRQUM1QyxNQUFNZSxnQkFBZ0J2QixrQkFBa0JnQixZQUFZTTtRQUNwREYsUUFBUUksSUFBSSxDQUFDO1lBQUNDLFFBQVFIO1lBQXFCSSxRQUFRSDtRQUFhO1FBQ2hFLElBQUlBLGdCQUFnQkgsT0FBTyxDQUFDQyxlQUFlLENBQUNLLE1BQU0sRUFBRTtZQUNuREwsaUJBQWlCYjtRQUNsQjtJQUNEO0lBR0EsTUFBTW1CLFlBQVlQLE9BQU8sQ0FBQ0MsZUFBZTtJQUV6QyxPQUFPO1FBQUVELFNBQVNBO1FBQVNPLFdBQVdBO1FBQVdOLGdCQUFnQkE7SUFBZTtBQUNqRjtBQUVBLFNBQVNILGFBQWFGLFVBQVUsRUFBRUMsYUFBYTtJQUM5QyxJQUFJLE9BQU9ELGVBQWUsVUFBVSxPQUFPO0lBQzNDLElBQUksQ0FBQ1ksTUFBTUMsT0FBTyxDQUFDWixnQkFBZ0IsT0FBTztJQUMxQyxJQUFJLENBQUNBLGNBQWNaLE1BQU0sRUFBRSxPQUFPO0lBQ2xDLElBQUlZLGNBQWNhLElBQUksQ0FBRSxTQUFVQyxDQUFDO1FBQUksT0FBTyxPQUFPQSxNQUFNO0lBQVEsSUFBSSxPQUFPO0lBQzlFLE9BQU87QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aXptaWZ5Ly4vbm9kZV9tb2R1bGVzL3N0cmluZy1zaW1pbGFyaXR5L3NyYy9pbmRleC5qcz85ZDA2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXHRjb21wYXJlVHdvU3RyaW5nczpjb21wYXJlVHdvU3RyaW5ncyxcblx0ZmluZEJlc3RNYXRjaDpmaW5kQmVzdE1hdGNoXG59O1xuXG5mdW5jdGlvbiBjb21wYXJlVHdvU3RyaW5ncyhmaXJzdCwgc2Vjb25kKSB7XG5cdGZpcnN0ID0gZmlyc3QucmVwbGFjZSgvXFxzKy9nLCAnJylcblx0c2Vjb25kID0gc2Vjb25kLnJlcGxhY2UoL1xccysvZywgJycpXG5cblx0aWYgKGZpcnN0ID09PSBzZWNvbmQpIHJldHVybiAxOyAvLyBpZGVudGljYWwgb3IgZW1wdHlcblx0aWYgKGZpcnN0Lmxlbmd0aCA8IDIgfHwgc2Vjb25kLmxlbmd0aCA8IDIpIHJldHVybiAwOyAvLyBpZiBlaXRoZXIgaXMgYSAwLWxldHRlciBvciAxLWxldHRlciBzdHJpbmdcblxuXHRsZXQgZmlyc3RCaWdyYW1zID0gbmV3IE1hcCgpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGZpcnN0Lmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdGNvbnN0IGJpZ3JhbSA9IGZpcnN0LnN1YnN0cmluZyhpLCBpICsgMik7XG5cdFx0Y29uc3QgY291bnQgPSBmaXJzdEJpZ3JhbXMuaGFzKGJpZ3JhbSlcblx0XHRcdD8gZmlyc3RCaWdyYW1zLmdldChiaWdyYW0pICsgMVxuXHRcdFx0OiAxO1xuXG5cdFx0Zmlyc3RCaWdyYW1zLnNldChiaWdyYW0sIGNvdW50KTtcblx0fTtcblxuXHRsZXQgaW50ZXJzZWN0aW9uU2l6ZSA9IDA7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc2Vjb25kLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdGNvbnN0IGJpZ3JhbSA9IHNlY29uZC5zdWJzdHJpbmcoaSwgaSArIDIpO1xuXHRcdGNvbnN0IGNvdW50ID0gZmlyc3RCaWdyYW1zLmhhcyhiaWdyYW0pXG5cdFx0XHQ/IGZpcnN0QmlncmFtcy5nZXQoYmlncmFtKVxuXHRcdFx0OiAwO1xuXG5cdFx0aWYgKGNvdW50ID4gMCkge1xuXHRcdFx0Zmlyc3RCaWdyYW1zLnNldChiaWdyYW0sIGNvdW50IC0gMSk7XG5cdFx0XHRpbnRlcnNlY3Rpb25TaXplKys7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuICgyLjAgKiBpbnRlcnNlY3Rpb25TaXplKSAvIChmaXJzdC5sZW5ndGggKyBzZWNvbmQubGVuZ3RoIC0gMik7XG59XG5cbmZ1bmN0aW9uIGZpbmRCZXN0TWF0Y2gobWFpblN0cmluZywgdGFyZ2V0U3RyaW5ncykge1xuXHRpZiAoIWFyZUFyZ3NWYWxpZChtYWluU3RyaW5nLCB0YXJnZXRTdHJpbmdzKSkgdGhyb3cgbmV3IEVycm9yKCdCYWQgYXJndW1lbnRzOiBGaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYSBzdHJpbmcsIHNlY29uZCBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncycpO1xuXHRcblx0Y29uc3QgcmF0aW5ncyA9IFtdO1xuXHRsZXQgYmVzdE1hdGNoSW5kZXggPSAwO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0U3RyaW5ncy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGN1cnJlbnRUYXJnZXRTdHJpbmcgPSB0YXJnZXRTdHJpbmdzW2ldO1xuXHRcdGNvbnN0IGN1cnJlbnRSYXRpbmcgPSBjb21wYXJlVHdvU3RyaW5ncyhtYWluU3RyaW5nLCBjdXJyZW50VGFyZ2V0U3RyaW5nKVxuXHRcdHJhdGluZ3MucHVzaCh7dGFyZ2V0OiBjdXJyZW50VGFyZ2V0U3RyaW5nLCByYXRpbmc6IGN1cnJlbnRSYXRpbmd9KVxuXHRcdGlmIChjdXJyZW50UmF0aW5nID4gcmF0aW5nc1tiZXN0TWF0Y2hJbmRleF0ucmF0aW5nKSB7XG5cdFx0XHRiZXN0TWF0Y2hJbmRleCA9IGlcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRjb25zdCBiZXN0TWF0Y2ggPSByYXRpbmdzW2Jlc3RNYXRjaEluZGV4XVxuXHRcblx0cmV0dXJuIHsgcmF0aW5nczogcmF0aW5ncywgYmVzdE1hdGNoOiBiZXN0TWF0Y2gsIGJlc3RNYXRjaEluZGV4OiBiZXN0TWF0Y2hJbmRleCB9O1xufVxuXG5mdW5jdGlvbiBhcmVBcmdzVmFsaWQobWFpblN0cmluZywgdGFyZ2V0U3RyaW5ncykge1xuXHRpZiAodHlwZW9mIG1haW5TdHJpbmcgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG5cdGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXRTdHJpbmdzKSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoIXRhcmdldFN0cmluZ3MubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0YXJnZXRTdHJpbmdzLmZpbmQoIGZ1bmN0aW9uIChzKSB7IHJldHVybiB0eXBlb2YgcyAhPT0gJ3N0cmluZyd9KSkgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29tcGFyZVR3b1N0cmluZ3MiLCJmaW5kQmVzdE1hdGNoIiwiZmlyc3QiLCJzZWNvbmQiLCJyZXBsYWNlIiwibGVuZ3RoIiwiZmlyc3RCaWdyYW1zIiwiTWFwIiwiaSIsImJpZ3JhbSIsInN1YnN0cmluZyIsImNvdW50IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaW50ZXJzZWN0aW9uU2l6ZSIsIm1haW5TdHJpbmciLCJ0YXJnZXRTdHJpbmdzIiwiYXJlQXJnc1ZhbGlkIiwiRXJyb3IiLCJyYXRpbmdzIiwiYmVzdE1hdGNoSW5kZXgiLCJjdXJyZW50VGFyZ2V0U3RyaW5nIiwiY3VycmVudFJhdGluZyIsInB1c2giLCJ0YXJnZXQiLCJyYXRpbmciLCJiZXN0TWF0Y2giLCJBcnJheSIsImlzQXJyYXkiLCJmaW5kIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/string-similarity/src/index.js\n");

/***/ })

};
;